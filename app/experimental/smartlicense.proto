// SmartLicense Datamodel Prototype

syntax = "proto3";


message SmartLicense {

    // licensors (optional):
    // Wallet-ID(s) of licensor(s)
    // By default the stream publisher(s) Wallet-ID(s) are assumed to be the
    // licensor(s). This assumption can be overridden by providing an explicit
    // list of one or more Wallet-IDs.
    repeated string licensors = 1;

    // materials:
    // The licensed material is identified by one or multiple ISCCs.
    repeated string materials = 2;

    // description (optional):
    // Short human readable description about the license offering
    // (max 1024 characters)
    string description = 3;

    // rights_profile (optional):
    // List of RightsModules to be effective for this SmartLicense.
    // If no RightsModules are provided only the general, non-optional clauses
    // of the SmartLicense will be effective.
    repeated RightsModule rights_profile = 4;

    // activation_modes (optional):
    // ActivationModes accepted by the SmartLicense
    // If no ActivationMode is given the SmartLicense is purely informational
    // and there is no defined way to close a license contract on-chain.
    repeated ActivationMode activation_modes = 5;

    // on_chain_price (optional):
    // Price per license in on-chain native currency.
    // Must be set if 'activation_modes' contains ON_CHAIN_PAYMENT
    double on_chain_price = 6;

    // off_chain_prices (optional):
    // Prices per license in off-chain currencies.
    repeated Price off_chain_prices = 7;

    // payment_address (optional):
    // The Wallet-ID to which the payment must be sent to aquire a
    // license. By default the stream publishers Wallet-ID is assumed to be the
    // payment_address. This assumption can be overridden by providing an
    // explicit payment_address.
    string payment_address = 8;

    // duration (optional):
    // Duration of license effectivness in seconds.
    // By default the duration of the license effectivness is assumed to be
    // unlimited. This can be overridden by a duration other than 0.
    uint64 duration = 9;

    // start_time (optional):
    // Start time of license effectivenes in seconds of UTC time
    // since Unix epoch (1970-01-01T00:00:00Z).
    // By default the start time of license is assumed to be the time of
    // activation (either by ON_CHAIN_PAYMENT or by ON_CHAIN_ATTESTATION).
    // This assumption can be overriden by a start_time other than 0.
    uint64 start_time = 10;

    // territories (optional):
    // A list of territories where the licensed material can be used.
    // The default assumes no territorial restrictions. This can be overridden
    // by providing a list of one or more ISO 3166-1 alpha-2 country codes.
    repeated string territories = 11;

    // access_url (optional):
    // An url that can be used by the to retrive the licensed material.
    // The access_url is expected to deliver a WebPage or Api service that is
    // able support features like:
    //
    //   1. authenticate a user by his/her Wallet-ID.
    //   2. verify on the blockchain that the user has a valid license for the
    //      requested content.
    //   3. deliver/stream the content to the user.
    //
    // Ultimately the content delivery system behind the access url is
    // application specific. In the future we might define a standard protocol
    // for a content delivery system.
    string access_url = 12;
}


enum RightsModule {
    // A standardized section of a smart license that describes a certain
    // kind of use.

    // No RightsModules provided
    UNSPECIFIED = 0;

    // Modify the licensed material and share modified version.
    // Side Effect: must be in combination with share
    ADAPT = 1;

    // Transfer licensed material to someone else for a limited time.
    // Side Effect: must be in combination with non-commercial
    LEND = 2;

    // Create copies of the work.
    REPRODUCE = 3;

    // Sell the smart license "as is" to someone else (one time transition).
    // What about single vs. multiple resale.
    RESALE = 4;

    // Make the material accessible to others in digital form.
    // Side effect: Must activate LEND, Must activate REPRODUCE?
    SHARE = 5;

    // Licensee may not use the material for commercial purposes.
    NON_COMMERCIAL = 6;

    // References to creator or publisher must not be removed.
    ATTRIBUTION = 7;

    // Shared adaptions must reference original material.
    INDICATE_ADAPTIONS = 8;
}


enum ActivationMode {
    // A standardized protocol that defines the technical conditions that
    // render a license contract effective.

    // States that a license contract becomes effective between licensor and
    // licensee when a payment of amount on_chain_price from the licensees
    // Wallet-ID to payment_address has been confirmed on the blockchain.
    ON_CHAIN_PAYMENT = 0;

    // States that a license contract becomes effective between licensor and
    // licensee when an on-chain attestation originating from the walled-id
    // of the licensor has been confirmed on the blockchain.
    // An on-chain attestation has to include references to a SmartLicense
    // and the Wallet-ID of the licensee.
    ON_CHAIN_ATTESTATION = 1;
}

message Price {
    double amount = 1;
    string currency = 2;
}
